version: 2.1
jobs:
  RSpec:
    working_directory: ~/umbrellanotice
    docker:
      - image: circleci/ruby
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Setup environment variable
          command: |
            echo "export COMPOSE_FILE=docker-compose.ci.yml" >> $BASH_ENV
      - run:
          name: Build images
          command: |
            set -x
            docker-compose build
      - run:
          name: Start containers
          command: |
            docker-compose up -d
      - run:
          name: Wait 90 seconds for Setup containers
          command: |
            sleep 90
      - run:
          name: Run RSpec
          command: docker-compose exec umbrellanotice rspec
  RuboCop:
    working_directory: ~/umbrellanotice
    docker:
      - image: circleci/ruby:2.5.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - gemfiles-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - gemfiles-{{ .Branch }}-
            - gemfiles-master-
      - run:
          name: install openjdk-8-jdk
          command: |
            sudo apt-get update
            sudo apt-get install -y openjdk-8-jdk
      - run: bundle config --local path vendor/bundle
      - run:
          name: bundle install
          command: bundle check || bundle install --jobs=8 --clean
      - run:
          name: Run rubocop
          command: bundle exec rubocop --parallel
      - save_cache:
          key: gemfiles-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
  Push-umbrellanotice-image:
    docker:
      - image: 'circleci/python:3.7.1'
    steps:
      - checkout
      - setup_remote_docker
      - aws-cli/install
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: ./Dockerfile.pro
          repo: umbrellanotice-app
          tag: "${CIRCLE_SHA1}"
  Push-db-migrate-image:
    docker:
      - image: 'circleci/python:3.7.1'
    steps:
      - checkout
      - setup_remote_docker
      - aws-cli/install
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: ./docker/db_migrate/Dockerfile.pro
          region: AWS_REGION
          repo: umbrellanotice-db-migration
          tag: "${CIRCLE_SHA1}"
  Run-db-migrate-task:
    docker:
      - image: 'circleci/python:3.7.1'
    environment:
      AWS_PAGER: ""
    steps:
      - setup_remote_docker
      - aws-cli/install
      - aws-ecs/update-task-definition:
          family: umbrellanotice_db_migrate
          container-image-name-updates: "container=db_migrate,tag=${CIRCLE_SHA1}"
      - aws-ecs/run-task:
          cluster: $AWS_ECS_ARN
          task-definition: umbrellanotice_db_migrate
          awsvpc: false
          launch-type: EC2

orbs:
  aws-cli: circleci/aws-cli@1.0.0
  aws-ecr: circleci/aws-ecr@6.8.2
  aws-ecs: circleci/aws-ecs@1.1.0

workflows:
  version: 2.1
  test_and_deploy:
    jobs:
      - RSpec
      - RuboCop
      - Push-umbrellanotice-image:
          requires:
            - RSpec
            - RuboCop
      - Push-db-migrate-image:
          requires:
            - RSpec
            - RuboCop
      - Run-db-migrate-task:
          requires:
            - Push-db-migrate-image
      - aws-ecs/deploy-service-update:
          name: Update-umbrellanotice-container-of-ECS
          family: 'umbrellanotice_task'
          cluster-name: $AWS_ECS_ARN
          service-name: 'umbrellanotice_Application_Service'
          container-image-name-updates: "container=umbrellanotice,tag=${CIRCLE_SHA1}"
          requires:
            - Run-db-migrate-task
            - Push-umbrellanotice-image
      - aws-ecs/deploy-service-update:
          name: Update-sidekiq-container-of-ECS
          family: 'umbrellanotice_redis'
          cluster-name: $AWS_ECS_ARN
          service-name: 'umbrellanotice_Sidekiq_Service'
          container-image-name-updates: "container=sidekiq,tag=${CIRCLE_SHA1}"
          requires:
            - Run-db-migrate-task
            - Push-umbrellanotice-image