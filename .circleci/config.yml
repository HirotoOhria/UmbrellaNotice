version: 2.1
jobs:

  RSpec:
    working_directory: ~/umbrellanotice
    docker:
      - image: circleci/ruby
    steps:
      - checkout
      - setup_remote_docker
      # - restore_cache:
      #     keys:
      #       - docker-dev-{{ .Branch }}-
      #       - docker-dev-
      - run:
          name: Setup environment variable
          command: |
            echo "export COMPOSE_FILE=docker-compose.ci.yml" >> $BASH_ENV
      # - run:
      #     name: Read Dcoker cache
      #     command: |
      #       if test -d ~/cache/docker/dev/umbrellanotice_umbrellanotice.tar; then docker load -i ~/cache/docker/dev/umbrellanotice_umbrellanotice.tar; fi
      #       if test -d ~/cache/docker/dev/umbrellanotice_sidekiq.tar; then docker load -i ~/cache/docker/dev/umbrellanotice_sidekiq.tar; fi
      #       if test -d ~/cache/docker/dev/umbrellanotice_redis.tar; then docker load -i ~/cache/docker/dev/umbrellanotice_redis.tar; fi
      #       if test -d ~/cache/docker/dev/umbrellanotice_mysql.tar; then docker load -i ~/cache/docker/dev/umbrellanotice_mysql.tar; fi
      #       if test -d ~/cache/docker/dev/umbrellanotice_nginx.tar; then docker load -i ~/cache/docker/dev/umbrellanotice_nginx.tar; fi
      - run:
          name: Build images
          command: |
            set -x
            docker-compose build
      - run:
          name: Start containers
          command: |
            docker-compose up -d
      - run:
          name: Wait 90 seconds for Setup containers
          command: |
            sleep 90
      - run:
          name: Run RSpec
          command: docker-compose exec rails rspec
      # - run:
      #     name: Output Dcoker Image for cache
      #     command: |
      #       mkdir -p ~/cache/docker/dev
      #       rm -rf ~/chache/docker/dev/*
      #       docker save -o ~/cache/docker/dev/umbrellanotice_umbrellanotice.tar umbrellanotice_umbrellanotice
      #       docker save -o ~/cache/docker/dev/umbrellanotice_sidekiq.tar umbrellanotice_sidekiq
      #       docker save -o ~/cache/docker/dev/umbrellanotice_redis.tar umbrellanotice_redis
      #       docker save -o ~/cache/docker/dev/umbrellanotice_mysql.tar umbrellanotice_mysql
      #       docker save -o ~/cache/docker/dev/umbrellanotice_nginx.tar umbrellanotice_nginx
      # - save_cache:
      #     key: docker-dev-{{ .Branch }}-{{ .BuildNum }}
      #     paths:
      #       - ~/cache/docker/dev

  RuboCop:
    working_directory: ~/umbrellanotice
    docker:
      - image: circleci/ruby:2.7.1
    steps:
      - checkout
      - run:
          name: Install Rubocop
          command: gem install rubocop
      - run:
          name: Run rubocop
          command: rubocop --parallel
          working_directory: ~/umbrellanotice/backend

  Push-nginx-image:
    docker:
      - image: 'circleci/python:3.7.1'
    steps:
      - setup_remote_docker
      - aws-cli/install
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          path: ./frontend
          dockerfile: ./docker/nginx/Dockerfile.pro
          region: AWS_REGION
          repo: umbrellanotice-nginx
          tag: "${CIRCLE_SHA1}"

  Push-umbrellanotice-image:
    docker:
      - image: 'circleci/python:3.7.1'
    steps:
      - setup_remote_docker
      - aws-cli/install
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          path: ./backend
          dockerfile: ./docker/rails/Dockerfile.pro
          region: AWS_REGION
          repo: umbrellanotice-app
          tag: "${CIRCLE_SHA1}"

  Push-db-migrate-image:
    docker:
      - image: 'circleci/python:3.7.1'
    steps:
      - setup_remote_docker
      - aws-cli/install
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          path: ./backend
          dockerfile: ./docker/db_migrate/Dockerfile.pro
          region: AWS_REGION
          repo: umbrellanotice-db-migration
          tag: "${CIRCLE_SHA1}"

  Run-db-migrate-task:
    docker:
      - image: 'circleci/python:3.7.1'
    environment:
      AWS_PAGER: ""
    steps:
      - setup_remote_docker
      - aws-cli/install
      - aws-ecs/update-task-definition:
          family: umbrellanotice_db_migrate
          container-image-name-updates: "container=db_migrate,tag=${CIRCLE_SHA1}"
      - aws-ecs/run-task:
          cluster: $AWS_ECS_ARN
          task-definition: umbrellanotice_db_migrate
          awsvpc: false
          launch-type: EC2

orbs:
  aws-cli: circleci/aws-cli@1.0.0
  aws-ecr: circleci/aws-ecr@6.8.2
  aws-ecs: circleci/aws-ecs@1.1.0

workflows:
  version: 2.1
  test_and_deploy:
    jobs:
#      - RSpec
#      - RuboCop

      - Push-nginx-image #:
#          requires:
#            - RuboCop
#          filters:
#            branches:
#              only: master

      - Push-umbrellanotice-image #:
#          requires:
#            - RuboCop
#          filters:
#            branches:
#              only: master

#      - Push-db-migrate-image:
#          requires:
#            - RuboCop
#          filters:
#            branches:
#              only: master

#      - Run-db-migrate-task:
#          requires:
#            - RSpec
#            - Push-db-migrate-image
#          filters:
#            branches:
#              only: master

      - aws-ecs/deploy-service-update:
          name: Update-umbrellanotice-container-of-ECS
          family: 'umbrellanotice_task'
          cluster-name: $AWS_ECS_ARN
          service-name: 'umbrellanotice-rails'
          container-image-name-updates: "container=umbrellanotice,tag=${CIRCLE_SHA1}"
          requires:
#            - Run-db-migrate-task
            - Push-nginx-image
            - Push-umbrellanotice-image

      - aws-ecs/deploy-service-update:
          name: Update-sidekiq-container-of-ECS
          family: 'umbrellanotice_redis'
          cluster-name: $AWS_ECS_ARN
          service-name: 'umbrellanotice-sidekiq'
          container-image-name-updates: "container=sidekiq,tag=${CIRCLE_SHA1}"
          requires:
#            - Run-db-migrate-task
            - Push-nginx-image
            - Push-umbrellanotice-image